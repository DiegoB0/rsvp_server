basePath: /api/v1
definitions:
  types.AllTickets:
    properties:
      generalTickets:
        type: integer
      guestConfirmed:
        type: integer
      guestNotConfirmed:
        type: integer
      guestTotal:
        type: integer
      namedTickets:
        type: integer
      totalTickets:
        type: integer
    type: object
  types.CreateGuestPayload:
    properties:
      additionals:
        example: 0
        type: integer
      confirmAttendance:
        example: false
        type: boolean
      fullName:
        example: Juan Perez
        type: string
    required:
    - additionals
    - confirmAttendance
    - fullName
    type: object
  types.CreateTablePayload:
    properties:
      capacity:
        example: 10
        type: integer
      name:
        example: Mesa 1
        type: string
    required:
    - name
    type: object
  types.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  types.GeneralTicket:
    properties:
      createdAt:
        type: string
      folio:
        type: integer
      id:
        type: integer
      pdfUrl:
        type: string
      qrCodeUrl:
        type: string
      tableId:
        type: integer
    type: object
  types.Guest:
    properties:
      additionals:
        type: integer
      confirmAttendance:
        type: boolean
      createdAt:
        type: string
      fullName:
        type: string
      id:
        type: integer
      tableId:
        type: integer
      ticketGenerated:
        type: boolean
      ticketSent:
        type: boolean
    type: object
  types.LoginSuccessResponse:
    properties:
      token:
        type: string
    type: object
  types.LoginUserPayload:
    properties:
      email:
        example: me@me.com
        type: string
      password:
        example: cum
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterUserPayload:
    properties:
      email:
        example: uri@uri.com
        type: string
      firstName:
        example: Uri
        type: string
      lastName:
        example: La creatura de la noche
        type: string
      password:
        example: "1234"
        maxLength: 130
        minLength: 3
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  types.ReturnGuestMetadata:
    properties:
      additionals:
        type: integer
      guestName:
        type: string
      pdfiles:
        type: string
      qrCodes:
        items:
          type: string
        type: array
      tableName:
        type: string
    type: object
  types.ReturnScanedData:
    properties:
      guestName:
        type: string
      tableName:
        type: string
      ticketStatus:
        type: string
    type: object
  types.Table:
    properties:
      capacity:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  types.TableAndGuests:
    properties:
      capacity:
        type: integer
      createdAt:
        type: string
      guests:
        items:
          $ref: '#/definitions/types.Guest'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  types.UpdateGuestPayload:
    properties:
      additionals:
        example: 0
        type: integer
      confirmAttendance:
        example: false
        type: boolean
      fullName:
        example: Eduardo Garcia
        type: string
    type: object
  types.UpdateTablePayload:
    properties:
      capacity:
        example: 10
        type: integer
      name:
        example: Mesa 1
        type: string
    type: object
  types.UpdateUserPayload:
    properties:
      email:
        example: uri@uri.com
        type: string
      firstName:
        example: Uri
        type: string
      lastName:
        example: La creatura de la noche
        type: string
      password:
        example: "123"
        maxLength: 130
        minLength: 3
        type: string
    type: object
  types.User:
    properties:
      createdAt:
        type: string
      emal:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for RSVP Backend
  title: RSVP API
  version: "1.0"
paths:
  /generals:
    delete:
      description: Deletes the last N general tickets in queue order (only unassigned
        allowed)
      parameters:
      - description: Number of generals to delete (default is 1)
        in: query
        name: count
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete last N generals
      tags:
      - generals
  /generals/assign/{generalId}/{tableId}:
    patch:
      consumes:
      - application/json
      description: Assign a general to a table
      parameters:
      - description: General ID
        in: path
        name: generalId
        required: true
        type: integer
      - description: Table ID
        in: path
        name: tableId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign a general to a table
      tags:
      - generals
  /generals/unassign/{id}:
    patch:
      consumes:
      - application/json
      description: Unassign general ticket from a table
      parameters:
      - description: General ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unassign a general to a table
      tags:
      - generals
  /guests:
    get:
      description: Returns a list of guests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Guest'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all guests
      tags:
      - guests
    post:
      consumes:
      - application/json
      description: Registers a new guset and returns a 201 status on success
      parameters:
      - description: Guest Creation Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.CreateGuestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new guest
      tags:
      - guests
  /guests/{id}:
    delete:
      description: Deletes a guest by ID
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a guest by ID
      tags:
      - guests
    get:
      description: Returns a single guest by their ID
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Guest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get guest by ID
      tags:
      - guests
    patch:
      consumes:
      - application/json
      description: Updates guest data by ID (partial update)
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      - description: Guest fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateGuestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Guest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a guest
      tags:
      - guests
  /guests/assign/{guestId}/{tableId}:
    patch:
      consumes:
      - application/json
      description: Updates guest data by ID (partial update)
      parameters:
      - description: Guest ID
        in: path
        name: guestId
        required: true
        type: integer
      - description: Table ID
        in: path
        name: tableId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign a guest to a table
      tags:
      - guests
  /guests/tickets/{id}:
    get:
      description: Returns a list of tickets per guest
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Guest'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tickets per guest
      tags:
      - guests
  /guests/unassign/{id}:
    patch:
      consumes:
      - application/json
      description: Updates guest data by ID (partial update)
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unassign a guest to a table
      tags:
      - guests
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LoginSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Login
      tags:
      - auth
  /tables:
    get:
      description: Returns a list of tables
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Table'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tables
      tags:
      - mesas
    post:
      consumes:
      - application/json
      description: Registers a new table and returns a 201 status on success
      parameters:
      - description: Registration Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.CreateTablePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new table
      tags:
      - mesas
  /tables/{id}:
    delete:
      description: Deletes a table by ID
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a table by ID
      tags:
      - mesas
    get:
      description: Returns a single table by their ID
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Table'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tables by ID
      tags:
      - mesas
    patch:
      consumes:
      - application/json
      description: Updates table data by ID (partial update)
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: integer
      - description: Table fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateTablePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Table'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a table
      tags:
      - mesas
  /tables/guests:
    get:
      description: Returns a list of tables with guests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.TableAndGuests'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tables and guests related
      tags:
      - mesas
  /tables/guests/{id}:
    get:
      description: Returns a single table with guests by their ID
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TableAndGuests'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get table with guests by ID
      tags:
      - mesas
  /tickets/activate-all:
    get:
      description: Generate all the tickets that have not being generated yet
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate all the tickets
      tags:
      - tickets
  /tickets/activate/{id}:
    get:
      description: Generate the tickets and stores the urls into the guest table
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate the tickets per guest by ID
      tags:
      - tickets
  /tickets/count:
    get:
      description: Returns the total number of named, general, and all tickets.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AllTickets'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get ticket counts
      tags:
      - tickets
  /tickets/create-generals:
    post:
      consumes:
      - application/json
      description: Generates general tickets and enqueues background jobs for QR and
        PDF upload.
      parameters:
      - description: Number of general tickets to generate
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create general tickets
      tags:
      - tickets
  /tickets/generals:
    get:
      description: Returns a list of all general tickets with their metadata.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.GeneralTicket'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get general tickets info
      tags:
      - tickets
  /tickets/generate-general/{id}:
    get:
      description: Get a PDF file for a single general ticket
      parameters:
      - description: General ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: PDF Ticket
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate a PDF file for general tickets
      tags:
      - tickets
  /tickets/info/{name}:
    get:
      description: Return the guest tickets
      parameters:
      - description: Guest Name
        in: path
        name: name
        required: true
        type: string
      - description: Confirm attendance (true/false)
        in: query
        name: confirmAttendance
        type: boolean
      - description: Optional email to send the ticket PDF
        in: query
        name: email
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ReturnGuestMetadata'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Return the guest metadata
      tags:
      - tickets
  /tickets/regenerate/{id}:
    get:
      description: Regenerate a ticket that has been already been generated
      parameters:
      - description: Guest ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: PDF Ticket
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Regenerate a ticket per guest by ID
      tags:
      - tickets
  /tickets/scan-qr/{code}:
    get:
      description: Validates a ticket code, marks it as used, and returns guest and
        table info.
      parameters:
      - description: Ticket Code
        in: path
        name: code
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ReturnScanedData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Scan a ticket by QR code
      tags:
      - tickets
  /users:
    get:
      description: Returns a list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Registers a new user and returns a 201 status on success
      parameters:
      - description: Registration Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Returns a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates user data by ID (partial update)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Returns a user by email (via query param)
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Provide your JWT token like: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication operations
  name: auth
- description: User management
  name: users
- description: Table management
  name: mesas
- description: Guest management
  name: guests
- description: Generals management
  name: generals
- description: Tickets management
  name: tickets
