basePath: /api/v1
definitions:
  types.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  types.LoginSuccessResponse:
    properties:
      token:
        type: string
    type: object
  types.LoginUserPayload:
    properties:
      email:
        example: me@me.com
        type: string
      password:
        example: cum
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterUserPayload:
    properties:
      email:
        example: uri@uri.com
        type: string
      firstName:
        example: Uri
        type: string
      lastName:
        example: La creatura de la noche
        type: string
      password:
        example: "1234"
        maxLength: 130
        minLength: 3
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  types.UpdateUserPayload:
    properties:
      email:
        example: uri@uri.com
        type: string
      firstName:
        example: Uri
        type: string
      lastName:
        example: La creatura de la noche
        type: string
      password:
        example: "123"
        maxLength: 130
        minLength: 3
        type: string
    type: object
  types.User:
    properties:
      createdAt:
        type: string
      emal:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for RSVP Backend
  title: RSVP API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LoginSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Login
      tags:
      - auth
  /users:
    get:
      description: Returns a list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Registers a new user and returns a 201 status on success
      parameters:
      - description: Registration Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Returns a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates user data by ID (partial update)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Returns a user by email (via query param)
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Provide your JWT token like: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
